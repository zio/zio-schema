/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package zio.schema.codec.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)")
public class HighArity implements org.apache.thrift.TBase<HighArity, HighArity._Fields>, java.io.Serializable, Cloneable, Comparable<HighArity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HighArity");

  private static final org.apache.thrift.protocol.TField F1_FIELD_DESC = new org.apache.thrift.protocol.TField("f1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField F2_FIELD_DESC = new org.apache.thrift.protocol.TField("f2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField F3_FIELD_DESC = new org.apache.thrift.protocol.TField("f3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField F4_FIELD_DESC = new org.apache.thrift.protocol.TField("f4", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField F5_FIELD_DESC = new org.apache.thrift.protocol.TField("f5", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField F6_FIELD_DESC = new org.apache.thrift.protocol.TField("f6", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField F7_FIELD_DESC = new org.apache.thrift.protocol.TField("f7", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField F8_FIELD_DESC = new org.apache.thrift.protocol.TField("f8", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField F9_FIELD_DESC = new org.apache.thrift.protocol.TField("f9", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField F10_FIELD_DESC = new org.apache.thrift.protocol.TField("f10", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField F11_FIELD_DESC = new org.apache.thrift.protocol.TField("f11", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField F12_FIELD_DESC = new org.apache.thrift.protocol.TField("f12", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField F13_FIELD_DESC = new org.apache.thrift.protocol.TField("f13", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField F14_FIELD_DESC = new org.apache.thrift.protocol.TField("f14", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField F15_FIELD_DESC = new org.apache.thrift.protocol.TField("f15", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField F16_FIELD_DESC = new org.apache.thrift.protocol.TField("f16", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField F17_FIELD_DESC = new org.apache.thrift.protocol.TField("f17", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField F18_FIELD_DESC = new org.apache.thrift.protocol.TField("f18", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField F19_FIELD_DESC = new org.apache.thrift.protocol.TField("f19", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField F20_FIELD_DESC = new org.apache.thrift.protocol.TField("f20", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField F21_FIELD_DESC = new org.apache.thrift.protocol.TField("f21", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField F22_FIELD_DESC = new org.apache.thrift.protocol.TField("f22", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField F23_FIELD_DESC = new org.apache.thrift.protocol.TField("f23", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField F24_FIELD_DESC = new org.apache.thrift.protocol.TField("f24", org.apache.thrift.protocol.TType.I32, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HighArityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HighArityTupleSchemeFactory();

  public int f1; // required
  public int f2; // required
  public int f3; // required
  public int f4; // required
  public int f5; // required
  public int f6; // required
  public int f7; // required
  public int f8; // required
  public int f9; // required
  public int f10; // required
  public int f11; // required
  public int f12; // required
  public int f13; // required
  public int f14; // required
  public int f15; // required
  public int f16; // required
  public int f17; // required
  public int f18; // required
  public int f19; // required
  public int f20; // required
  public int f21; // required
  public int f22; // required
  public int f23; // required
  public int f24; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    F1((short)1, "f1"),
    F2((short)2, "f2"),
    F3((short)3, "f3"),
    F4((short)4, "f4"),
    F5((short)5, "f5"),
    F6((short)6, "f6"),
    F7((short)7, "f7"),
    F8((short)8, "f8"),
    F9((short)9, "f9"),
    F10((short)10, "f10"),
    F11((short)11, "f11"),
    F12((short)12, "f12"),
    F13((short)13, "f13"),
    F14((short)14, "f14"),
    F15((short)15, "f15"),
    F16((short)16, "f16"),
    F17((short)17, "f17"),
    F18((short)18, "f18"),
    F19((short)19, "f19"),
    F20((short)20, "f20"),
    F21((short)21, "f21"),
    F22((short)22, "f22"),
    F23((short)23, "f23"),
    F24((short)24, "f24");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // F1
          return F1;
        case 2: // F2
          return F2;
        case 3: // F3
          return F3;
        case 4: // F4
          return F4;
        case 5: // F5
          return F5;
        case 6: // F6
          return F6;
        case 7: // F7
          return F7;
        case 8: // F8
          return F8;
        case 9: // F9
          return F9;
        case 10: // F10
          return F10;
        case 11: // F11
          return F11;
        case 12: // F12
          return F12;
        case 13: // F13
          return F13;
        case 14: // F14
          return F14;
        case 15: // F15
          return F15;
        case 16: // F16
          return F16;
        case 17: // F17
          return F17;
        case 18: // F18
          return F18;
        case 19: // F19
          return F19;
        case 20: // F20
          return F20;
        case 21: // F21
          return F21;
        case 22: // F22
          return F22;
        case 23: // F23
          return F23;
        case 24: // F24
          return F24;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __F1_ISSET_ID = 0;
  private static final int __F2_ISSET_ID = 1;
  private static final int __F3_ISSET_ID = 2;
  private static final int __F4_ISSET_ID = 3;
  private static final int __F5_ISSET_ID = 4;
  private static final int __F6_ISSET_ID = 5;
  private static final int __F7_ISSET_ID = 6;
  private static final int __F8_ISSET_ID = 7;
  private static final int __F9_ISSET_ID = 8;
  private static final int __F10_ISSET_ID = 9;
  private static final int __F11_ISSET_ID = 10;
  private static final int __F12_ISSET_ID = 11;
  private static final int __F13_ISSET_ID = 12;
  private static final int __F14_ISSET_ID = 13;
  private static final int __F15_ISSET_ID = 14;
  private static final int __F16_ISSET_ID = 15;
  private static final int __F17_ISSET_ID = 16;
  private static final int __F18_ISSET_ID = 17;
  private static final int __F19_ISSET_ID = 18;
  private static final int __F20_ISSET_ID = 19;
  private static final int __F21_ISSET_ID = 20;
  private static final int __F22_ISSET_ID = 21;
  private static final int __F23_ISSET_ID = 22;
  private static final int __F24_ISSET_ID = 23;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.F1, new org.apache.thrift.meta_data.FieldMetaData("f1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F2, new org.apache.thrift.meta_data.FieldMetaData("f2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F3, new org.apache.thrift.meta_data.FieldMetaData("f3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F4, new org.apache.thrift.meta_data.FieldMetaData("f4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F5, new org.apache.thrift.meta_data.FieldMetaData("f5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F6, new org.apache.thrift.meta_data.FieldMetaData("f6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F7, new org.apache.thrift.meta_data.FieldMetaData("f7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F8, new org.apache.thrift.meta_data.FieldMetaData("f8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F9, new org.apache.thrift.meta_data.FieldMetaData("f9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F10, new org.apache.thrift.meta_data.FieldMetaData("f10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F11, new org.apache.thrift.meta_data.FieldMetaData("f11", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F12, new org.apache.thrift.meta_data.FieldMetaData("f12", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F13, new org.apache.thrift.meta_data.FieldMetaData("f13", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F14, new org.apache.thrift.meta_data.FieldMetaData("f14", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F15, new org.apache.thrift.meta_data.FieldMetaData("f15", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F16, new org.apache.thrift.meta_data.FieldMetaData("f16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F17, new org.apache.thrift.meta_data.FieldMetaData("f17", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F18, new org.apache.thrift.meta_data.FieldMetaData("f18", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F19, new org.apache.thrift.meta_data.FieldMetaData("f19", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F20, new org.apache.thrift.meta_data.FieldMetaData("f20", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F21, new org.apache.thrift.meta_data.FieldMetaData("f21", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F22, new org.apache.thrift.meta_data.FieldMetaData("f22", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F23, new org.apache.thrift.meta_data.FieldMetaData("f23", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.F24, new org.apache.thrift.meta_data.FieldMetaData("f24", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HighArity.class, metaDataMap);
  }

  public HighArity() {
  }

  public HighArity(
    int f1,
    int f2,
    int f3,
    int f4,
    int f5,
    int f6,
    int f7,
    int f8,
    int f9,
    int f10,
    int f11,
    int f12,
    int f13,
    int f14,
    int f15,
    int f16,
    int f17,
    int f18,
    int f19,
    int f20,
    int f21,
    int f22,
    int f23,
    int f24)
  {
    this();
    this.f1 = f1;
    setF1IsSet(true);
    this.f2 = f2;
    setF2IsSet(true);
    this.f3 = f3;
    setF3IsSet(true);
    this.f4 = f4;
    setF4IsSet(true);
    this.f5 = f5;
    setF5IsSet(true);
    this.f6 = f6;
    setF6IsSet(true);
    this.f7 = f7;
    setF7IsSet(true);
    this.f8 = f8;
    setF8IsSet(true);
    this.f9 = f9;
    setF9IsSet(true);
    this.f10 = f10;
    setF10IsSet(true);
    this.f11 = f11;
    setF11IsSet(true);
    this.f12 = f12;
    setF12IsSet(true);
    this.f13 = f13;
    setF13IsSet(true);
    this.f14 = f14;
    setF14IsSet(true);
    this.f15 = f15;
    setF15IsSet(true);
    this.f16 = f16;
    setF16IsSet(true);
    this.f17 = f17;
    setF17IsSet(true);
    this.f18 = f18;
    setF18IsSet(true);
    this.f19 = f19;
    setF19IsSet(true);
    this.f20 = f20;
    setF20IsSet(true);
    this.f21 = f21;
    setF21IsSet(true);
    this.f22 = f22;
    setF22IsSet(true);
    this.f23 = f23;
    setF23IsSet(true);
    this.f24 = f24;
    setF24IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HighArity(HighArity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.f1 = other.f1;
    this.f2 = other.f2;
    this.f3 = other.f3;
    this.f4 = other.f4;
    this.f5 = other.f5;
    this.f6 = other.f6;
    this.f7 = other.f7;
    this.f8 = other.f8;
    this.f9 = other.f9;
    this.f10 = other.f10;
    this.f11 = other.f11;
    this.f12 = other.f12;
    this.f13 = other.f13;
    this.f14 = other.f14;
    this.f15 = other.f15;
    this.f16 = other.f16;
    this.f17 = other.f17;
    this.f18 = other.f18;
    this.f19 = other.f19;
    this.f20 = other.f20;
    this.f21 = other.f21;
    this.f22 = other.f22;
    this.f23 = other.f23;
    this.f24 = other.f24;
  }

  public HighArity deepCopy() {
    return new HighArity(this);
  }

  @Override
  public void clear() {
    setF1IsSet(false);
    this.f1 = 0;
    setF2IsSet(false);
    this.f2 = 0;
    setF3IsSet(false);
    this.f3 = 0;
    setF4IsSet(false);
    this.f4 = 0;
    setF5IsSet(false);
    this.f5 = 0;
    setF6IsSet(false);
    this.f6 = 0;
    setF7IsSet(false);
    this.f7 = 0;
    setF8IsSet(false);
    this.f8 = 0;
    setF9IsSet(false);
    this.f9 = 0;
    setF10IsSet(false);
    this.f10 = 0;
    setF11IsSet(false);
    this.f11 = 0;
    setF12IsSet(false);
    this.f12 = 0;
    setF13IsSet(false);
    this.f13 = 0;
    setF14IsSet(false);
    this.f14 = 0;
    setF15IsSet(false);
    this.f15 = 0;
    setF16IsSet(false);
    this.f16 = 0;
    setF17IsSet(false);
    this.f17 = 0;
    setF18IsSet(false);
    this.f18 = 0;
    setF19IsSet(false);
    this.f19 = 0;
    setF20IsSet(false);
    this.f20 = 0;
    setF21IsSet(false);
    this.f21 = 0;
    setF22IsSet(false);
    this.f22 = 0;
    setF23IsSet(false);
    this.f23 = 0;
    setF24IsSet(false);
    this.f24 = 0;
  }

  public int getF1() {
    return this.f1;
  }

  public HighArity setF1(int f1) {
    this.f1 = f1;
    setF1IsSet(true);
    return this;
  }

  public void unsetF1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F1_ISSET_ID);
  }

  /** Returns true if field f1 is set (has been assigned a value) and false otherwise */
  public boolean isSetF1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F1_ISSET_ID);
  }

  public void setF1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F1_ISSET_ID, value);
  }

  public int getF2() {
    return this.f2;
  }

  public HighArity setF2(int f2) {
    this.f2 = f2;
    setF2IsSet(true);
    return this;
  }

  public void unsetF2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F2_ISSET_ID);
  }

  /** Returns true if field f2 is set (has been assigned a value) and false otherwise */
  public boolean isSetF2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F2_ISSET_ID);
  }

  public void setF2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F2_ISSET_ID, value);
  }

  public int getF3() {
    return this.f3;
  }

  public HighArity setF3(int f3) {
    this.f3 = f3;
    setF3IsSet(true);
    return this;
  }

  public void unsetF3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F3_ISSET_ID);
  }

  /** Returns true if field f3 is set (has been assigned a value) and false otherwise */
  public boolean isSetF3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F3_ISSET_ID);
  }

  public void setF3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F3_ISSET_ID, value);
  }

  public int getF4() {
    return this.f4;
  }

  public HighArity setF4(int f4) {
    this.f4 = f4;
    setF4IsSet(true);
    return this;
  }

  public void unsetF4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F4_ISSET_ID);
  }

  /** Returns true if field f4 is set (has been assigned a value) and false otherwise */
  public boolean isSetF4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F4_ISSET_ID);
  }

  public void setF4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F4_ISSET_ID, value);
  }

  public int getF5() {
    return this.f5;
  }

  public HighArity setF5(int f5) {
    this.f5 = f5;
    setF5IsSet(true);
    return this;
  }

  public void unsetF5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F5_ISSET_ID);
  }

  /** Returns true if field f5 is set (has been assigned a value) and false otherwise */
  public boolean isSetF5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F5_ISSET_ID);
  }

  public void setF5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F5_ISSET_ID, value);
  }

  public int getF6() {
    return this.f6;
  }

  public HighArity setF6(int f6) {
    this.f6 = f6;
    setF6IsSet(true);
    return this;
  }

  public void unsetF6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F6_ISSET_ID);
  }

  /** Returns true if field f6 is set (has been assigned a value) and false otherwise */
  public boolean isSetF6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F6_ISSET_ID);
  }

  public void setF6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F6_ISSET_ID, value);
  }

  public int getF7() {
    return this.f7;
  }

  public HighArity setF7(int f7) {
    this.f7 = f7;
    setF7IsSet(true);
    return this;
  }

  public void unsetF7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F7_ISSET_ID);
  }

  /** Returns true if field f7 is set (has been assigned a value) and false otherwise */
  public boolean isSetF7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F7_ISSET_ID);
  }

  public void setF7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F7_ISSET_ID, value);
  }

  public int getF8() {
    return this.f8;
  }

  public HighArity setF8(int f8) {
    this.f8 = f8;
    setF8IsSet(true);
    return this;
  }

  public void unsetF8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F8_ISSET_ID);
  }

  /** Returns true if field f8 is set (has been assigned a value) and false otherwise */
  public boolean isSetF8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F8_ISSET_ID);
  }

  public void setF8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F8_ISSET_ID, value);
  }

  public int getF9() {
    return this.f9;
  }

  public HighArity setF9(int f9) {
    this.f9 = f9;
    setF9IsSet(true);
    return this;
  }

  public void unsetF9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F9_ISSET_ID);
  }

  /** Returns true if field f9 is set (has been assigned a value) and false otherwise */
  public boolean isSetF9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F9_ISSET_ID);
  }

  public void setF9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F9_ISSET_ID, value);
  }

  public int getF10() {
    return this.f10;
  }

  public HighArity setF10(int f10) {
    this.f10 = f10;
    setF10IsSet(true);
    return this;
  }

  public void unsetF10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F10_ISSET_ID);
  }

  /** Returns true if field f10 is set (has been assigned a value) and false otherwise */
  public boolean isSetF10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F10_ISSET_ID);
  }

  public void setF10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F10_ISSET_ID, value);
  }

  public int getF11() {
    return this.f11;
  }

  public HighArity setF11(int f11) {
    this.f11 = f11;
    setF11IsSet(true);
    return this;
  }

  public void unsetF11() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F11_ISSET_ID);
  }

  /** Returns true if field f11 is set (has been assigned a value) and false otherwise */
  public boolean isSetF11() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F11_ISSET_ID);
  }

  public void setF11IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F11_ISSET_ID, value);
  }

  public int getF12() {
    return this.f12;
  }

  public HighArity setF12(int f12) {
    this.f12 = f12;
    setF12IsSet(true);
    return this;
  }

  public void unsetF12() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F12_ISSET_ID);
  }

  /** Returns true if field f12 is set (has been assigned a value) and false otherwise */
  public boolean isSetF12() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F12_ISSET_ID);
  }

  public void setF12IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F12_ISSET_ID, value);
  }

  public int getF13() {
    return this.f13;
  }

  public HighArity setF13(int f13) {
    this.f13 = f13;
    setF13IsSet(true);
    return this;
  }

  public void unsetF13() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F13_ISSET_ID);
  }

  /** Returns true if field f13 is set (has been assigned a value) and false otherwise */
  public boolean isSetF13() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F13_ISSET_ID);
  }

  public void setF13IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F13_ISSET_ID, value);
  }

  public int getF14() {
    return this.f14;
  }

  public HighArity setF14(int f14) {
    this.f14 = f14;
    setF14IsSet(true);
    return this;
  }

  public void unsetF14() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F14_ISSET_ID);
  }

  /** Returns true if field f14 is set (has been assigned a value) and false otherwise */
  public boolean isSetF14() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F14_ISSET_ID);
  }

  public void setF14IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F14_ISSET_ID, value);
  }

  public int getF15() {
    return this.f15;
  }

  public HighArity setF15(int f15) {
    this.f15 = f15;
    setF15IsSet(true);
    return this;
  }

  public void unsetF15() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F15_ISSET_ID);
  }

  /** Returns true if field f15 is set (has been assigned a value) and false otherwise */
  public boolean isSetF15() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F15_ISSET_ID);
  }

  public void setF15IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F15_ISSET_ID, value);
  }

  public int getF16() {
    return this.f16;
  }

  public HighArity setF16(int f16) {
    this.f16 = f16;
    setF16IsSet(true);
    return this;
  }

  public void unsetF16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F16_ISSET_ID);
  }

  /** Returns true if field f16 is set (has been assigned a value) and false otherwise */
  public boolean isSetF16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F16_ISSET_ID);
  }

  public void setF16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F16_ISSET_ID, value);
  }

  public int getF17() {
    return this.f17;
  }

  public HighArity setF17(int f17) {
    this.f17 = f17;
    setF17IsSet(true);
    return this;
  }

  public void unsetF17() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F17_ISSET_ID);
  }

  /** Returns true if field f17 is set (has been assigned a value) and false otherwise */
  public boolean isSetF17() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F17_ISSET_ID);
  }

  public void setF17IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F17_ISSET_ID, value);
  }

  public int getF18() {
    return this.f18;
  }

  public HighArity setF18(int f18) {
    this.f18 = f18;
    setF18IsSet(true);
    return this;
  }

  public void unsetF18() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F18_ISSET_ID);
  }

  /** Returns true if field f18 is set (has been assigned a value) and false otherwise */
  public boolean isSetF18() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F18_ISSET_ID);
  }

  public void setF18IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F18_ISSET_ID, value);
  }

  public int getF19() {
    return this.f19;
  }

  public HighArity setF19(int f19) {
    this.f19 = f19;
    setF19IsSet(true);
    return this;
  }

  public void unsetF19() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F19_ISSET_ID);
  }

  /** Returns true if field f19 is set (has been assigned a value) and false otherwise */
  public boolean isSetF19() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F19_ISSET_ID);
  }

  public void setF19IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F19_ISSET_ID, value);
  }

  public int getF20() {
    return this.f20;
  }

  public HighArity setF20(int f20) {
    this.f20 = f20;
    setF20IsSet(true);
    return this;
  }

  public void unsetF20() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F20_ISSET_ID);
  }

  /** Returns true if field f20 is set (has been assigned a value) and false otherwise */
  public boolean isSetF20() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F20_ISSET_ID);
  }

  public void setF20IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F20_ISSET_ID, value);
  }

  public int getF21() {
    return this.f21;
  }

  public HighArity setF21(int f21) {
    this.f21 = f21;
    setF21IsSet(true);
    return this;
  }

  public void unsetF21() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F21_ISSET_ID);
  }

  /** Returns true if field f21 is set (has been assigned a value) and false otherwise */
  public boolean isSetF21() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F21_ISSET_ID);
  }

  public void setF21IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F21_ISSET_ID, value);
  }

  public int getF22() {
    return this.f22;
  }

  public HighArity setF22(int f22) {
    this.f22 = f22;
    setF22IsSet(true);
    return this;
  }

  public void unsetF22() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F22_ISSET_ID);
  }

  /** Returns true if field f22 is set (has been assigned a value) and false otherwise */
  public boolean isSetF22() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F22_ISSET_ID);
  }

  public void setF22IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F22_ISSET_ID, value);
  }

  public int getF23() {
    return this.f23;
  }

  public HighArity setF23(int f23) {
    this.f23 = f23;
    setF23IsSet(true);
    return this;
  }

  public void unsetF23() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F23_ISSET_ID);
  }

  /** Returns true if field f23 is set (has been assigned a value) and false otherwise */
  public boolean isSetF23() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F23_ISSET_ID);
  }

  public void setF23IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F23_ISSET_ID, value);
  }

  public int getF24() {
    return this.f24;
  }

  public HighArity setF24(int f24) {
    this.f24 = f24;
    setF24IsSet(true);
    return this;
  }

  public void unsetF24() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F24_ISSET_ID);
  }

  /** Returns true if field f24 is set (has been assigned a value) and false otherwise */
  public boolean isSetF24() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F24_ISSET_ID);
  }

  public void setF24IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F24_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case F1:
      if (value == null) {
        unsetF1();
      } else {
        setF1((java.lang.Integer)value);
      }
      break;

    case F2:
      if (value == null) {
        unsetF2();
      } else {
        setF2((java.lang.Integer)value);
      }
      break;

    case F3:
      if (value == null) {
        unsetF3();
      } else {
        setF3((java.lang.Integer)value);
      }
      break;

    case F4:
      if (value == null) {
        unsetF4();
      } else {
        setF4((java.lang.Integer)value);
      }
      break;

    case F5:
      if (value == null) {
        unsetF5();
      } else {
        setF5((java.lang.Integer)value);
      }
      break;

    case F6:
      if (value == null) {
        unsetF6();
      } else {
        setF6((java.lang.Integer)value);
      }
      break;

    case F7:
      if (value == null) {
        unsetF7();
      } else {
        setF7((java.lang.Integer)value);
      }
      break;

    case F8:
      if (value == null) {
        unsetF8();
      } else {
        setF8((java.lang.Integer)value);
      }
      break;

    case F9:
      if (value == null) {
        unsetF9();
      } else {
        setF9((java.lang.Integer)value);
      }
      break;

    case F10:
      if (value == null) {
        unsetF10();
      } else {
        setF10((java.lang.Integer)value);
      }
      break;

    case F11:
      if (value == null) {
        unsetF11();
      } else {
        setF11((java.lang.Integer)value);
      }
      break;

    case F12:
      if (value == null) {
        unsetF12();
      } else {
        setF12((java.lang.Integer)value);
      }
      break;

    case F13:
      if (value == null) {
        unsetF13();
      } else {
        setF13((java.lang.Integer)value);
      }
      break;

    case F14:
      if (value == null) {
        unsetF14();
      } else {
        setF14((java.lang.Integer)value);
      }
      break;

    case F15:
      if (value == null) {
        unsetF15();
      } else {
        setF15((java.lang.Integer)value);
      }
      break;

    case F16:
      if (value == null) {
        unsetF16();
      } else {
        setF16((java.lang.Integer)value);
      }
      break;

    case F17:
      if (value == null) {
        unsetF17();
      } else {
        setF17((java.lang.Integer)value);
      }
      break;

    case F18:
      if (value == null) {
        unsetF18();
      } else {
        setF18((java.lang.Integer)value);
      }
      break;

    case F19:
      if (value == null) {
        unsetF19();
      } else {
        setF19((java.lang.Integer)value);
      }
      break;

    case F20:
      if (value == null) {
        unsetF20();
      } else {
        setF20((java.lang.Integer)value);
      }
      break;

    case F21:
      if (value == null) {
        unsetF21();
      } else {
        setF21((java.lang.Integer)value);
      }
      break;

    case F22:
      if (value == null) {
        unsetF22();
      } else {
        setF22((java.lang.Integer)value);
      }
      break;

    case F23:
      if (value == null) {
        unsetF23();
      } else {
        setF23((java.lang.Integer)value);
      }
      break;

    case F24:
      if (value == null) {
        unsetF24();
      } else {
        setF24((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case F1:
      return getF1();

    case F2:
      return getF2();

    case F3:
      return getF3();

    case F4:
      return getF4();

    case F5:
      return getF5();

    case F6:
      return getF6();

    case F7:
      return getF7();

    case F8:
      return getF8();

    case F9:
      return getF9();

    case F10:
      return getF10();

    case F11:
      return getF11();

    case F12:
      return getF12();

    case F13:
      return getF13();

    case F14:
      return getF14();

    case F15:
      return getF15();

    case F16:
      return getF16();

    case F17:
      return getF17();

    case F18:
      return getF18();

    case F19:
      return getF19();

    case F20:
      return getF20();

    case F21:
      return getF21();

    case F22:
      return getF22();

    case F23:
      return getF23();

    case F24:
      return getF24();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case F1:
      return isSetF1();
    case F2:
      return isSetF2();
    case F3:
      return isSetF3();
    case F4:
      return isSetF4();
    case F5:
      return isSetF5();
    case F6:
      return isSetF6();
    case F7:
      return isSetF7();
    case F8:
      return isSetF8();
    case F9:
      return isSetF9();
    case F10:
      return isSetF10();
    case F11:
      return isSetF11();
    case F12:
      return isSetF12();
    case F13:
      return isSetF13();
    case F14:
      return isSetF14();
    case F15:
      return isSetF15();
    case F16:
      return isSetF16();
    case F17:
      return isSetF17();
    case F18:
      return isSetF18();
    case F19:
      return isSetF19();
    case F20:
      return isSetF20();
    case F21:
      return isSetF21();
    case F22:
      return isSetF22();
    case F23:
      return isSetF23();
    case F24:
      return isSetF24();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof HighArity)
      return this.equals((HighArity)that);
    return false;
  }

  public boolean equals(HighArity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_f1 = true;
    boolean that_present_f1 = true;
    if (this_present_f1 || that_present_f1) {
      if (!(this_present_f1 && that_present_f1))
        return false;
      if (this.f1 != that.f1)
        return false;
    }

    boolean this_present_f2 = true;
    boolean that_present_f2 = true;
    if (this_present_f2 || that_present_f2) {
      if (!(this_present_f2 && that_present_f2))
        return false;
      if (this.f2 != that.f2)
        return false;
    }

    boolean this_present_f3 = true;
    boolean that_present_f3 = true;
    if (this_present_f3 || that_present_f3) {
      if (!(this_present_f3 && that_present_f3))
        return false;
      if (this.f3 != that.f3)
        return false;
    }

    boolean this_present_f4 = true;
    boolean that_present_f4 = true;
    if (this_present_f4 || that_present_f4) {
      if (!(this_present_f4 && that_present_f4))
        return false;
      if (this.f4 != that.f4)
        return false;
    }

    boolean this_present_f5 = true;
    boolean that_present_f5 = true;
    if (this_present_f5 || that_present_f5) {
      if (!(this_present_f5 && that_present_f5))
        return false;
      if (this.f5 != that.f5)
        return false;
    }

    boolean this_present_f6 = true;
    boolean that_present_f6 = true;
    if (this_present_f6 || that_present_f6) {
      if (!(this_present_f6 && that_present_f6))
        return false;
      if (this.f6 != that.f6)
        return false;
    }

    boolean this_present_f7 = true;
    boolean that_present_f7 = true;
    if (this_present_f7 || that_present_f7) {
      if (!(this_present_f7 && that_present_f7))
        return false;
      if (this.f7 != that.f7)
        return false;
    }

    boolean this_present_f8 = true;
    boolean that_present_f8 = true;
    if (this_present_f8 || that_present_f8) {
      if (!(this_present_f8 && that_present_f8))
        return false;
      if (this.f8 != that.f8)
        return false;
    }

    boolean this_present_f9 = true;
    boolean that_present_f9 = true;
    if (this_present_f9 || that_present_f9) {
      if (!(this_present_f9 && that_present_f9))
        return false;
      if (this.f9 != that.f9)
        return false;
    }

    boolean this_present_f10 = true;
    boolean that_present_f10 = true;
    if (this_present_f10 || that_present_f10) {
      if (!(this_present_f10 && that_present_f10))
        return false;
      if (this.f10 != that.f10)
        return false;
    }

    boolean this_present_f11 = true;
    boolean that_present_f11 = true;
    if (this_present_f11 || that_present_f11) {
      if (!(this_present_f11 && that_present_f11))
        return false;
      if (this.f11 != that.f11)
        return false;
    }

    boolean this_present_f12 = true;
    boolean that_present_f12 = true;
    if (this_present_f12 || that_present_f12) {
      if (!(this_present_f12 && that_present_f12))
        return false;
      if (this.f12 != that.f12)
        return false;
    }

    boolean this_present_f13 = true;
    boolean that_present_f13 = true;
    if (this_present_f13 || that_present_f13) {
      if (!(this_present_f13 && that_present_f13))
        return false;
      if (this.f13 != that.f13)
        return false;
    }

    boolean this_present_f14 = true;
    boolean that_present_f14 = true;
    if (this_present_f14 || that_present_f14) {
      if (!(this_present_f14 && that_present_f14))
        return false;
      if (this.f14 != that.f14)
        return false;
    }

    boolean this_present_f15 = true;
    boolean that_present_f15 = true;
    if (this_present_f15 || that_present_f15) {
      if (!(this_present_f15 && that_present_f15))
        return false;
      if (this.f15 != that.f15)
        return false;
    }

    boolean this_present_f16 = true;
    boolean that_present_f16 = true;
    if (this_present_f16 || that_present_f16) {
      if (!(this_present_f16 && that_present_f16))
        return false;
      if (this.f16 != that.f16)
        return false;
    }

    boolean this_present_f17 = true;
    boolean that_present_f17 = true;
    if (this_present_f17 || that_present_f17) {
      if (!(this_present_f17 && that_present_f17))
        return false;
      if (this.f17 != that.f17)
        return false;
    }

    boolean this_present_f18 = true;
    boolean that_present_f18 = true;
    if (this_present_f18 || that_present_f18) {
      if (!(this_present_f18 && that_present_f18))
        return false;
      if (this.f18 != that.f18)
        return false;
    }

    boolean this_present_f19 = true;
    boolean that_present_f19 = true;
    if (this_present_f19 || that_present_f19) {
      if (!(this_present_f19 && that_present_f19))
        return false;
      if (this.f19 != that.f19)
        return false;
    }

    boolean this_present_f20 = true;
    boolean that_present_f20 = true;
    if (this_present_f20 || that_present_f20) {
      if (!(this_present_f20 && that_present_f20))
        return false;
      if (this.f20 != that.f20)
        return false;
    }

    boolean this_present_f21 = true;
    boolean that_present_f21 = true;
    if (this_present_f21 || that_present_f21) {
      if (!(this_present_f21 && that_present_f21))
        return false;
      if (this.f21 != that.f21)
        return false;
    }

    boolean this_present_f22 = true;
    boolean that_present_f22 = true;
    if (this_present_f22 || that_present_f22) {
      if (!(this_present_f22 && that_present_f22))
        return false;
      if (this.f22 != that.f22)
        return false;
    }

    boolean this_present_f23 = true;
    boolean that_present_f23 = true;
    if (this_present_f23 || that_present_f23) {
      if (!(this_present_f23 && that_present_f23))
        return false;
      if (this.f23 != that.f23)
        return false;
    }

    boolean this_present_f24 = true;
    boolean that_present_f24 = true;
    if (this_present_f24 || that_present_f24) {
      if (!(this_present_f24 && that_present_f24))
        return false;
      if (this.f24 != that.f24)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + f1;

    hashCode = hashCode * 8191 + f2;

    hashCode = hashCode * 8191 + f3;

    hashCode = hashCode * 8191 + f4;

    hashCode = hashCode * 8191 + f5;

    hashCode = hashCode * 8191 + f6;

    hashCode = hashCode * 8191 + f7;

    hashCode = hashCode * 8191 + f8;

    hashCode = hashCode * 8191 + f9;

    hashCode = hashCode * 8191 + f10;

    hashCode = hashCode * 8191 + f11;

    hashCode = hashCode * 8191 + f12;

    hashCode = hashCode * 8191 + f13;

    hashCode = hashCode * 8191 + f14;

    hashCode = hashCode * 8191 + f15;

    hashCode = hashCode * 8191 + f16;

    hashCode = hashCode * 8191 + f17;

    hashCode = hashCode * 8191 + f18;

    hashCode = hashCode * 8191 + f19;

    hashCode = hashCode * 8191 + f20;

    hashCode = hashCode * 8191 + f21;

    hashCode = hashCode * 8191 + f22;

    hashCode = hashCode * 8191 + f23;

    hashCode = hashCode * 8191 + f24;

    return hashCode;
  }

  @Override
  public int compareTo(HighArity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetF1(), other.isSetF1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f1, other.f1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF2(), other.isSetF2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2, other.f2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF3(), other.isSetF3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f3, other.f3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF4(), other.isSetF4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f4, other.f4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF5(), other.isSetF5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f5, other.f5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF6(), other.isSetF6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f6, other.f6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF7(), other.isSetF7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f7, other.f7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF8(), other.isSetF8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f8, other.f8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF9(), other.isSetF9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f9, other.f9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF10(), other.isSetF10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f10, other.f10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF11(), other.isSetF11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f11, other.f11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF12(), other.isSetF12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f12, other.f12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF13(), other.isSetF13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f13, other.f13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF14(), other.isSetF14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f14, other.f14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF15(), other.isSetF15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f15, other.f15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF16(), other.isSetF16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f16, other.f16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF17(), other.isSetF17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f17, other.f17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF18(), other.isSetF18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f18, other.f18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF19(), other.isSetF19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f19, other.f19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF20(), other.isSetF20());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF20()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f20, other.f20);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF21(), other.isSetF21());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF21()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f21, other.f21);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF22(), other.isSetF22());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF22()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f22, other.f22);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF23(), other.isSetF23());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF23()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f23, other.f23);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetF24(), other.isSetF24());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF24()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f24, other.f24);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HighArity(");
    boolean first = true;

    sb.append("f1:");
    sb.append(this.f1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f2:");
    sb.append(this.f2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f3:");
    sb.append(this.f3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f4:");
    sb.append(this.f4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f5:");
    sb.append(this.f5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f6:");
    sb.append(this.f6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f7:");
    sb.append(this.f7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f8:");
    sb.append(this.f8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f9:");
    sb.append(this.f9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f10:");
    sb.append(this.f10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f11:");
    sb.append(this.f11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f12:");
    sb.append(this.f12);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f13:");
    sb.append(this.f13);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f14:");
    sb.append(this.f14);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f15:");
    sb.append(this.f15);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f16:");
    sb.append(this.f16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f17:");
    sb.append(this.f17);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f18:");
    sb.append(this.f18);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f19:");
    sb.append(this.f19);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f20:");
    sb.append(this.f20);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f21:");
    sb.append(this.f21);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f22:");
    sb.append(this.f22);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f23:");
    sb.append(this.f23);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f24:");
    sb.append(this.f24);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HighArityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HighArityStandardScheme getScheme() {
      return new HighArityStandardScheme();
    }
  }

  private static class HighArityStandardScheme extends org.apache.thrift.scheme.StandardScheme<HighArity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HighArity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // F1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f1 = iprot.readI32();
              struct.setF1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // F2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f2 = iprot.readI32();
              struct.setF2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // F3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f3 = iprot.readI32();
              struct.setF3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // F4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f4 = iprot.readI32();
              struct.setF4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // F5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f5 = iprot.readI32();
              struct.setF5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // F6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f6 = iprot.readI32();
              struct.setF6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // F7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f7 = iprot.readI32();
              struct.setF7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // F8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f8 = iprot.readI32();
              struct.setF8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // F9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f9 = iprot.readI32();
              struct.setF9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // F10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f10 = iprot.readI32();
              struct.setF10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // F11
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f11 = iprot.readI32();
              struct.setF11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // F12
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f12 = iprot.readI32();
              struct.setF12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // F13
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f13 = iprot.readI32();
              struct.setF13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // F14
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f14 = iprot.readI32();
              struct.setF14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // F15
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f15 = iprot.readI32();
              struct.setF15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // F16
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f16 = iprot.readI32();
              struct.setF16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // F17
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f17 = iprot.readI32();
              struct.setF17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // F18
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f18 = iprot.readI32();
              struct.setF18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // F19
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f19 = iprot.readI32();
              struct.setF19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // F20
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f20 = iprot.readI32();
              struct.setF20IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // F21
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f21 = iprot.readI32();
              struct.setF21IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // F22
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f22 = iprot.readI32();
              struct.setF22IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // F23
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f23 = iprot.readI32();
              struct.setF23IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // F24
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.f24 = iprot.readI32();
              struct.setF24IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HighArity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(F1_FIELD_DESC);
      oprot.writeI32(struct.f1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F2_FIELD_DESC);
      oprot.writeI32(struct.f2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F3_FIELD_DESC);
      oprot.writeI32(struct.f3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F4_FIELD_DESC);
      oprot.writeI32(struct.f4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F5_FIELD_DESC);
      oprot.writeI32(struct.f5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F6_FIELD_DESC);
      oprot.writeI32(struct.f6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F7_FIELD_DESC);
      oprot.writeI32(struct.f7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F8_FIELD_DESC);
      oprot.writeI32(struct.f8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F9_FIELD_DESC);
      oprot.writeI32(struct.f9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F10_FIELD_DESC);
      oprot.writeI32(struct.f10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F11_FIELD_DESC);
      oprot.writeI32(struct.f11);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F12_FIELD_DESC);
      oprot.writeI32(struct.f12);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F13_FIELD_DESC);
      oprot.writeI32(struct.f13);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F14_FIELD_DESC);
      oprot.writeI32(struct.f14);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F15_FIELD_DESC);
      oprot.writeI32(struct.f15);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F16_FIELD_DESC);
      oprot.writeI32(struct.f16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F17_FIELD_DESC);
      oprot.writeI32(struct.f17);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F18_FIELD_DESC);
      oprot.writeI32(struct.f18);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F19_FIELD_DESC);
      oprot.writeI32(struct.f19);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F20_FIELD_DESC);
      oprot.writeI32(struct.f20);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F21_FIELD_DESC);
      oprot.writeI32(struct.f21);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F22_FIELD_DESC);
      oprot.writeI32(struct.f22);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F23_FIELD_DESC);
      oprot.writeI32(struct.f23);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F24_FIELD_DESC);
      oprot.writeI32(struct.f24);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HighArityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HighArityTupleScheme getScheme() {
      return new HighArityTupleScheme();
    }
  }

  private static class HighArityTupleScheme extends org.apache.thrift.scheme.TupleScheme<HighArity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HighArity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetF1()) {
        optionals.set(0);
      }
      if (struct.isSetF2()) {
        optionals.set(1);
      }
      if (struct.isSetF3()) {
        optionals.set(2);
      }
      if (struct.isSetF4()) {
        optionals.set(3);
      }
      if (struct.isSetF5()) {
        optionals.set(4);
      }
      if (struct.isSetF6()) {
        optionals.set(5);
      }
      if (struct.isSetF7()) {
        optionals.set(6);
      }
      if (struct.isSetF8()) {
        optionals.set(7);
      }
      if (struct.isSetF9()) {
        optionals.set(8);
      }
      if (struct.isSetF10()) {
        optionals.set(9);
      }
      if (struct.isSetF11()) {
        optionals.set(10);
      }
      if (struct.isSetF12()) {
        optionals.set(11);
      }
      if (struct.isSetF13()) {
        optionals.set(12);
      }
      if (struct.isSetF14()) {
        optionals.set(13);
      }
      if (struct.isSetF15()) {
        optionals.set(14);
      }
      if (struct.isSetF16()) {
        optionals.set(15);
      }
      if (struct.isSetF17()) {
        optionals.set(16);
      }
      if (struct.isSetF18()) {
        optionals.set(17);
      }
      if (struct.isSetF19()) {
        optionals.set(18);
      }
      if (struct.isSetF20()) {
        optionals.set(19);
      }
      if (struct.isSetF21()) {
        optionals.set(20);
      }
      if (struct.isSetF22()) {
        optionals.set(21);
      }
      if (struct.isSetF23()) {
        optionals.set(22);
      }
      if (struct.isSetF24()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetF1()) {
        oprot.writeI32(struct.f1);
      }
      if (struct.isSetF2()) {
        oprot.writeI32(struct.f2);
      }
      if (struct.isSetF3()) {
        oprot.writeI32(struct.f3);
      }
      if (struct.isSetF4()) {
        oprot.writeI32(struct.f4);
      }
      if (struct.isSetF5()) {
        oprot.writeI32(struct.f5);
      }
      if (struct.isSetF6()) {
        oprot.writeI32(struct.f6);
      }
      if (struct.isSetF7()) {
        oprot.writeI32(struct.f7);
      }
      if (struct.isSetF8()) {
        oprot.writeI32(struct.f8);
      }
      if (struct.isSetF9()) {
        oprot.writeI32(struct.f9);
      }
      if (struct.isSetF10()) {
        oprot.writeI32(struct.f10);
      }
      if (struct.isSetF11()) {
        oprot.writeI32(struct.f11);
      }
      if (struct.isSetF12()) {
        oprot.writeI32(struct.f12);
      }
      if (struct.isSetF13()) {
        oprot.writeI32(struct.f13);
      }
      if (struct.isSetF14()) {
        oprot.writeI32(struct.f14);
      }
      if (struct.isSetF15()) {
        oprot.writeI32(struct.f15);
      }
      if (struct.isSetF16()) {
        oprot.writeI32(struct.f16);
      }
      if (struct.isSetF17()) {
        oprot.writeI32(struct.f17);
      }
      if (struct.isSetF18()) {
        oprot.writeI32(struct.f18);
      }
      if (struct.isSetF19()) {
        oprot.writeI32(struct.f19);
      }
      if (struct.isSetF20()) {
        oprot.writeI32(struct.f20);
      }
      if (struct.isSetF21()) {
        oprot.writeI32(struct.f21);
      }
      if (struct.isSetF22()) {
        oprot.writeI32(struct.f22);
      }
      if (struct.isSetF23()) {
        oprot.writeI32(struct.f23);
      }
      if (struct.isSetF24()) {
        oprot.writeI32(struct.f24);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HighArity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.f1 = iprot.readI32();
        struct.setF1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.f2 = iprot.readI32();
        struct.setF2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.f3 = iprot.readI32();
        struct.setF3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.f4 = iprot.readI32();
        struct.setF4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.f5 = iprot.readI32();
        struct.setF5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.f6 = iprot.readI32();
        struct.setF6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.f7 = iprot.readI32();
        struct.setF7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.f8 = iprot.readI32();
        struct.setF8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.f9 = iprot.readI32();
        struct.setF9IsSet(true);
      }
      if (incoming.get(9)) {
        struct.f10 = iprot.readI32();
        struct.setF10IsSet(true);
      }
      if (incoming.get(10)) {
        struct.f11 = iprot.readI32();
        struct.setF11IsSet(true);
      }
      if (incoming.get(11)) {
        struct.f12 = iprot.readI32();
        struct.setF12IsSet(true);
      }
      if (incoming.get(12)) {
        struct.f13 = iprot.readI32();
        struct.setF13IsSet(true);
      }
      if (incoming.get(13)) {
        struct.f14 = iprot.readI32();
        struct.setF14IsSet(true);
      }
      if (incoming.get(14)) {
        struct.f15 = iprot.readI32();
        struct.setF15IsSet(true);
      }
      if (incoming.get(15)) {
        struct.f16 = iprot.readI32();
        struct.setF16IsSet(true);
      }
      if (incoming.get(16)) {
        struct.f17 = iprot.readI32();
        struct.setF17IsSet(true);
      }
      if (incoming.get(17)) {
        struct.f18 = iprot.readI32();
        struct.setF18IsSet(true);
      }
      if (incoming.get(18)) {
        struct.f19 = iprot.readI32();
        struct.setF19IsSet(true);
      }
      if (incoming.get(19)) {
        struct.f20 = iprot.readI32();
        struct.setF20IsSet(true);
      }
      if (incoming.get(20)) {
        struct.f21 = iprot.readI32();
        struct.setF21IsSet(true);
      }
      if (incoming.get(21)) {
        struct.f22 = iprot.readI32();
        struct.setF22IsSet(true);
      }
      if (incoming.get(22)) {
        struct.f23 = iprot.readI32();
        struct.setF23IsSet(true);
      }
      if (incoming.get(23)) {
        struct.f24 = iprot.readI32();
        struct.setF24IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

